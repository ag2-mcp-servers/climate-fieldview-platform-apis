# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:10:36+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import (
    APIKeyHeader,
    BaseSecurity,
    UnsuportedSecurityStub,
)
from fastapi import Header, Path, Query
from pydantic import conint

from models import (
    ApplicationActivities,
    ApplicationActivityContents,
    Boundaries,
    BoundariesQuery,
    Boundary,
    BoundaryUpload,
    CreatedExport,
    CreatedUpload,
    Empty,
    Error,
    Export,
    ExportContents,
    ExportStatus,
    FarmOrganization,
    FarmOrganizationType,
    FieldModel,
    Fields,
    HarvestActivities,
    HarvestActivityContents,
    Operations,
    PlantingActivities,
    PlantingActivityContents,
    ResourceOwner,
    ScoutingObservation,
    ScoutingObservationAttachmentContents,
    ScoutingObservationAttachments,
    ScoutingObservations,
    Upload,
    UploadedBoundaryId,
    UploadStatus,
    UploadStatuses,
    UploadStatusQuery,
)

app = MCPProxy(
    contact={'email': 'developer@climate.com', 'name': 'Climate FieldView Support'},
    description='**Last Modified**: Wed Jan  4 12:47:29 UTC 2023\n\n\nAll endpoints are only accessible via HTTPS.\n\n* All API endpoints are located at `https://platform.climate.com` (e.g.\n`https://platform.climate.com/v4/fields`).\n\n* The authorization token endpoint is located at\n`https://api.climate.com/api/oauth/token`.\n\n## Troubleshooting\n\n`X-Http-Request-Id` response header will be returned on every call,\nsuccessful or not. If you experience an issue with our api and need\nto contact technical support, please supply the value of the `X-Http-Request-Id`\nheader along with an approximate time of when the request was made.\n\n## Request Limits\n\nWhen you’re onboarded to Climate’s API platform, your `x-api-key` is assigned a custom usage plan. Usage plans are unique to each partner and have the following key attributes: \n\n1. Throttling information\n    * burstLimit: Maximum rate limit over a period ranging from 1 second to a few seconds\n    * rateLimit: A steady-state rate limit\n\n2. Quota information\n    * Limit: The maximum number of requests that can be made in a given month\n\nWhen the request rate threshold is exceeded, a `429` response code is returned. Optionally, the [`Retry-After`](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.37) header may be returned: \n\nFollowing are examples of rate limit errors:\n\n1. Rate limit exceeded:\n\n<br>HTTP/1.1 429 \n<br>Content-Type: application/json\n<br>Content-Length: 32\n\n   {"message":"Too Many Requests"}\n\n2. Quota exhausted:\n<br>HTTP/1.1 429 \n<br>Content-Type: application/json\n<br>Content-Length: 29\n\n    {"message":"Limit Exceeded"}\n\n## Pagination\n\nPagination is performed via headers. Any request which returns a `"results"`\narray may be paginated. The following figure shows how query results are laid out with\nX-Limit=4 and no filter applied.\n\n<img style="width:70%;height:auto;" src="https://s3-us-west-2.amazonaws.com/climate-com/images/svg_upload_tests/paging.png">\n\n* If there are no results, a response code of `304` will be returned.\n\n* If the response is the last set of results, a response code of `200` or\n`206` will be returned.\n\n* If there are more results, a response code of `206` will be returned.\n\n* If `X-Next-Token` is provided in the request headers but the token has\nexpired, a response code of `409` will be returned. This is only applicable\nfor some endpoints; see specific endpoint documentation below.\n\n#### X-Limit\n\nThe page size can be controlled with the `X-Limit` header. Valid values are\n`1-100` and defaults to `100`.\n\n#### X-Next-Token\n\nIf the results are paginated, a response header of `X-Next-Token` will be\nreturned. Use the associated value in the subsequent request (via the `X-Next-Token`\nrequest header) to retrieve the next page. The following sequence diagram shows how to\nuse `X-Next-Token` to fetch all the records.\n\n<img src="https://s3-us-west-2.amazonaws.com/climate-com/images/svg_upload_tests/x-next-token.svg">\n\n\n## Chunked Uploads\n\nUploads larger than `5MiB` (`5242880 bytes`) must be done in `5MiB` chunks\n(with the exception of the final chunk). Each chunk request MUST contain a\n`Content-Range` header specifying the portion of the upload, and a `Content-Type`\nheader specifying binary content type (`application/octet-stream`). Range\nuploads must be contiguous. The maximum upload size is capped at `500MiB` (`524288000 bytes`).\n\n## Chunked Downloads\n\nDownloads larger than `5MiB` (`5242880 bytes`) must be done in `1-5MiB`\nchunks (with the exception of the final chunk, which may be less than `1MiB`).\nEach chunk request MUST contain a `Range` header specifying the requested portion of the download,\nand an `Accept` header specifying binary and json content types  (`application/octet-stream,application/json`)\nor all content types (`*/*`).\n\n## Drivers\n\nIf you need drivers to process agronomic data, download the ADAPT plugin below. We only support the plugin in the Windows environment, minimum is Windows 7 SP1.\n\nFor asPlanted, asHarvested and asApplied data:\n* [ADAPT Plugin](https://dev.fieldview.com/drivers/ClimateADAPTPlugin_latest.exe)\n<br>Release notes can be found [here](https://dev.fieldview.com/drivers/adapt-release-notes.txt).\n<br>Download and use of the ADAPT plugin means that you agree to the EULA for use of the ADAPT plugin. \n<br>Please review the [EULA](https://dev.fieldview.com/EULA/ADAPT%20Plugin%20EULA-06-19.pdf) (last updated on June 6th, 2019) before download and use of the ADAPT plugin.\n<br>For more information, please refer to:\n  * [ADAPT Resources](https://adaptframework.org/)\n  * [ADAPT Overview](https://aggateway.atlassian.net/wiki/spaces/ADM/overview)\n  * [ADAPT FAQ](https://aggateway.atlassian.net/wiki/spaces/ADM/pages/165942474/ADAPT+Frequently-Asked+Questions+FAQ)\n  * [ADAPT Videos](https://adaptframework.org/adapt-videos/)\n\n## Sample Test Data\n\nSample agronomic data:\n* [asPlanted and asHarvested data](https://dev.fieldview.com/sample-agronomic-data/Planting_Harvesting_data_04_18_2018_21_46_18.zip)\n* [asApplied data set 1](https://dev.fieldview.com/sample-agronomic-data/as-applied-data1.zip)\n* [asApplied data set 2](https://dev.fieldview.com/sample-agronomic-data/as-applied-data2.zip)\n<br>To upload the sample data to your account, please follow the instructions in this [link](https://support.climate.com/kt#/kA02A000000AaxzSAC/en_US).\n\nSample soil data:\n* [Sample soil data](https://dev.fieldview.com/sample-soil-data/soil-sample.xml)\n---\n',
    title='Climate FieldView Platform APIs',
    version='4.0.11',
    servers=[{'url': 'https://platform.climate.com/'}],
)


@app.post(
    '/v4/boundaries',
    description=""" Upload a **Boundary** entry by passing the geometry of the boundary. This will store the boundary but will not create field in Climate FieldView and will not link to an existing field in Climate FieldView.
This is restricted to callers with **boundaries:write** scope.
To upload a field boundary for field creation in Climate FieldView, please use **POST /v4/uploads**. """,
    tags=['boundary_handling', 'upload_process_management'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def upload_boundary(body: BoundaryUpload = None):
    """
    Upload a boundary
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v4/boundaries/query',
    description=""" Retrieve multiple **Boundaries** (up to 10 per request). """,
    tags=['boundary_handling'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def fetch_boundaries(body: BoundariesQuery = None):
    """
    Retrieve Boundaries in batch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/boundaries/{boundaryId}',
    description=""" Retrieve a **Boundary** by ID. """,
    tags=['boundary_handling'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def fetch_boundary_by_id(boundary_id: UUID = Path(..., alias='boundaryId')):
    """
    Retrieve a Boundary by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v4/exports',
    description=""" Step one in requesting a data product. The method will return an **Export** ID which the caller will use in subsequent `GET` requests.
The following `contentTypes` may be requested:
  * __application/vnd.climate.acrsi.geojson__ (Beta)
     Exports the planting activities accessible by the authenticated user and optionally filtered by resource owner
     as a [GeoJSON Feature Collection](https://tools.ietf.org/html/rfc7946#page-12).

     The export request definition must contain the following properties:
       * plantingStartDate
       * plantingEndDate
       * resourceOwnerId

     Requires `exports:read` and `plantingActivitySummary:read` scope.
  
  * __application/vnd.climate.harvest.geojson__
     Exports the harvesting activities accessible by the authenticated user and optionally filtered by resource owner
     as a [GeoJSON Feature Collection](https://tools.ietf.org/html/rfc7946#page-12).

     The export request definition must contain the following properties:
       * harvestStartDate
       * harvestEndDate
       * resourceOwnerId

     Requires `exports:read` and `plantingActivitySummary:read` scope. """,
    tags=['export_request_handling'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_export(body: Export = None):
    """
    Initiate a new export request.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/exports/{exportId}/contents',
    description=""" Downloads larger than `5MiB` (`5242880 bytes`) in size must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB` (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`). """,
    tags=['export_request_handling'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def fetch_export_contents_by_id(
    accept: str = Header(..., alias='Accept'),
    export_id: UUID = Path(..., alias='exportId'),
    range: str = Header(..., alias='Range'),
):
    """
    Retrieve the binary contents of a processed export request.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/exports/{exportId}/status',
    description=""" Check the status of an **Export** by ID. """,
    tags=['export_request_handling'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def fetch_export_status_by_id(export_id: UUID = Path(..., alias='exportId')):
    """
    Retrieve the status of an Export.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/farmOrganizations/{farmOrganizationType}/{farmOrganizationId}',
    description=""" Retrieve a given **farm organization** by organization type and ID. """,
    tags=['resource_owner_details_management'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def fetch_farm_organization_by_type_and_id(
    farm_organization_type: FarmOrganizationType = Path(
        ..., alias='farmOrganizationType'
    ),
    farm_organization_id: UUID = Path(..., alias='farmOrganizationId'),
):
    """
    Retrieve a specific farm organization by organization type and ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/fields',
    description=""" Retrieve list of **Fields**. Filter the results by field name if the `fieldName` query parameter is specified. """,
    tags=['field_information_access'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def fetch_fields(
    x__next__token: Optional[str] = Header(None, alias='X-Next-Token'),
    x__limit: Optional[conint(ge=1, le=100)] = Header(None, alias='X-Limit'),
    field_name: Optional[str] = Query(None, alias='fieldName'),
):
    """
    Retrieve list of Fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/fields/all',
    description=""" Retrieve all fields the authenticated user has access to, including fields shared with the authenticated user from other resource owners. Filter the results by field name if the `fieldName` query parameter is specified.
A 409 will be returned if the X-Next-Token has expired. When receiving a 409, the client should discard the X-Next-Token, discard all currently persisted fields for the user, and re-fetch fields from /fields/all. """,
    tags=['field_information_access'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def fetch_all_fields(
    x__next__token: Optional[str] = Header(None, alias='X-Next-Token'),
    x__limit: Optional[conint(ge=1, le=100)] = Header(None, alias='X-Limit'),
    field_name: Optional[str] = Query(None, alias='fieldName'),
):
    """
    Retrieve list of all Fields the user has access to.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/fields/{fieldId}',
    description=""" Retrieve a given **Field** by ID. """,
    tags=['field_information_access'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def fetch_field_by_id(field_id: UUID = Path(..., alias='fieldId')):
    """
    Retrieve a specific Field by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/layers/asApplied',
    description=""" Retrieve a list of application activities. The id in the response is used for  GET /v4/layers/asApplied/{activityId}/contents. """,
    tags=['agricultural_activity_tracking', 'resource_owner_details_management'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_v4_layers_as_applied(
    accept: str = Header(..., alias='Accept'),
    x__next__token: Optional[str] = Header(None, alias='X-Next-Token'),
    x__limit: Optional[conint(ge=1, le=100)] = Header(None, alias='X-Limit'),
    resource_owner_id: Optional[UUID] = Query(None, alias='resourceOwnerId'),
    occurred_after: Optional[datetime] = Query(None, alias='occurredAfter'),
    occurred_before: Optional[datetime] = Query(None, alias='occurredBefore'),
    updated_after: Optional[datetime] = Query(None, alias='updatedAfter'),
):
    """
    Retrieve a list of application activities
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/layers/asApplied/{activityId}/contents',
    description=""" Retrieve an individual application activity by id.  Ids are retrieved via the  /layers/asApplied route. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`). The data is compressed using .zip format. """,
    tags=['agricultural_activity_tracking'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_v4_layers_as_applied__activity_id_contents(
    accept: str = Header(..., alias='Accept'),
    activity_id: UUID = Path(..., alias='activityId'),
    range: str = Header(..., alias='Range'),
):
    """
    Retrieve the raw application activity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/layers/asHarvested',
    description=""" Retrieve a list of harvest activities. The id in the response is used for  GET /v4/layers/asHarvested/{activityId}/contents. """,
    tags=['agricultural_activity_tracking'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_v4_layers_as_harvested(
    accept: str = Header(..., alias='Accept'),
    x__next__token: Optional[str] = Header(None, alias='X-Next-Token'),
    x__limit: Optional[conint(ge=1, le=100)] = Header(None, alias='X-Limit'),
    resource_owner_id: Optional[UUID] = Query(None, alias='resourceOwnerId'),
    occurred_after: Optional[datetime] = Query(None, alias='occurredAfter'),
    occurred_before: Optional[datetime] = Query(None, alias='occurredBefore'),
    updated_after: Optional[datetime] = Query(None, alias='updatedAfter'),
):
    """
    Retrieve a list of harvest activities
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/layers/asHarvested/{activityId}/contents',
    description=""" Retrieve an individual harvest activity by id.  Ids are retrieved via the  /layers/asHarvested route. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`). The data is compressed using .zip format. """,
    tags=['agricultural_activity_tracking'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_v4_layers_as_harvested__activity_id_contents(
    accept: str = Header(..., alias='Accept'),
    activity_id: UUID = Path(..., alias='activityId'),
    range: str = Header(..., alias='Range'),
):
    """
    Retrieve the raw harvest activity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/layers/asPlanted',
    description=""" Retrieve a list of planting activities. The id in the response is used for  GET /v4/layers/asPlanted/{activityId}/contents. """,
    tags=['agricultural_activity_tracking'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_v4_layers_as_planted(
    accept: str = Header(..., alias='Accept'),
    x__next__token: Optional[str] = Header(None, alias='X-Next-Token'),
    x__limit: Optional[conint(ge=1, le=100)] = Header(None, alias='X-Limit'),
    resource_owner_id: Optional[UUID] = Query(None, alias='resourceOwnerId'),
    occurred_after: Optional[datetime] = Query(None, alias='occurredAfter'),
    occurred_before: Optional[datetime] = Query(None, alias='occurredBefore'),
    updated_after: Optional[datetime] = Query(None, alias='updatedAfter'),
):
    """
    Retrieve a list of planting activities
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/layers/asPlanted/{activityId}/contents',
    description=""" Retrieve an individual planting activity by id.  Ids are retrieved via the  /layers/asPlanted route. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`).  The data is compressed using .zip format. """,
    tags=['agricultural_activity_tracking'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_v4_layers_as_planted__activity_id_contents(
    accept: str = Header(..., alias='Accept'),
    activity_id: UUID = Path(..., alias='activityId'),
    range: str = Header(..., alias='Range'),
):
    """
    Retrieve the raw planting activity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/layers/scoutingObservations',
    description=""" Retrieve a list of scouting observations created or updated by the user identified by the Authorization header. """,
    tags=['scouting_observation_tracking', 'agricultural_activity_tracking'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_v4_layers_scouting_observations(
    x__next__token: Optional[str] = Header(None, alias='X-Next-Token'),
    x__limit: Optional[conint(ge=1, le=100)] = Header(None, alias='X-Limit'),
    occurred_after: Optional[datetime] = Query(None, alias='occurredAfter'),
    occurred_before: Optional[datetime] = Query(None, alias='occurredBefore'),
):
    """
    Retrieve a list of scouting observations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/layers/scoutingObservations/{scoutingObservationId}',
    description=""" Retrieve an individual scouting observation by id.  Ids are retrieved via the /layers/scoutingObservations route. """,
    tags=['scouting_observation_tracking'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_v4_layers_scouting_observations__scouting_observation_id(
    scouting_observation_id: UUID = Path(..., alias='scoutingObservationId')
):
    """
    Retrieve individual scouting observation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/layers/scoutingObservations/{scoutingObservationId}/attachments',
    description=""" Retrieve attachments associated with a given scouting observation. Photos added to scouting notes in the FieldView app are capped to 20MB, and we won’t store photos larger than that in a scouting note. """,
    tags=['scouting_observation_tracking'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def retrieve_scouting_observation_attachments(
    scouting_observation_id: UUID = Path(..., alias='scoutingObservationId'),
    x__next__token: Optional[str] = Header(None, alias='X-Next-Token'),
    x__limit: Optional[conint(ge=1, le=100)] = Header(None, alias='X-Limit'),
):
    """
    Retrieve attachments associated with a given scouting observation.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/layers/scoutingObservations/{scoutingObservationId}/attachments/{attachmentId}/contents',
    description=""" Photos added to scouting notes in the FieldView app are capped to `20MiB` (`20971520 bytes`), and we won’t store photos larger than that in a scouting note. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB` (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`). """,
    tags=['scouting_observation_tracking'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def retrieve_scouting_observation_attachment_contents(
    accept: str = Header(..., alias='Accept'),
    scouting_observation_id: UUID = Path(..., alias='scoutingObservationId'),
    attachment_id: UUID = Path(..., alias='attachmentId'),
    range: str = Header(..., alias='Range'),
):
    """
    Retrieve the binary contents of a scouting observation’s attachment.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/operations/all',
    description=""" Retrieve the **operations** accessible to the authenticated user. Filter the results by resource owner if the `resourceOwnerId` query parameter is specified. """,
    tags=['resource_owner_details_management'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def fetch_operations(
    resource_owner_id: Optional[str] = Query(None, alias='resourceOwnerId')
):
    """
    Retrieve the operations accessible to a a given user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/resourceOwners/{resourceOwnerId}',
    description=""" Retrieve a resource owner for the given `resourceOwnerId`. """,
    tags=['resource_owner_details_management'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_resource_owner(resource_owner_id: UUID = Path(..., alias='resourceOwnerId')):
    """
    Retrieve a resource owner by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v4/uploads',
    description=""" Step one in uploading a data product. The method will return an **Upload** ID which the caller will use in subsequent `PUT` requests.
The following `contentTypes` may be uploaded:
    <details><summary>__image/vnd.climate.thermal.geotiff__</summary>

    Allows for the upload of a thermal image. The image is a single band geotiff with 64 bit signed floating point values in degrees Celsius. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.

    The following metadata entries are required to be embedded in the geotiff:
      * acquisitionStartDate - ISO8601 date
      * acquisitionEndDate - ISO8601 date
      * isCalibrated - boolean

    The following metadata entries are optional:
      * sourceId - uuid referencing the asset in the partner's system
      * fieldId - uuid referencing a field in the Climate system
      * boundaryId - uuid referencing a boundary in the Climate system
      * brandId - uuid referencing a partner's branding in the Climate system
      * name - name of the layer. The maximum number of characters that will be accepted as input is 20.

    Requires either imagery:write or platform scope.
  </details>
  <details><summary>__image/vnd.climate.ndvi.geotiff__</summary>

    Allows for the upload of a NDVI image. The image is a single band geotiff with 64 bit signed floating point values in the range of -1 to 1 inclusive. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.

    The following metadata entries are required to be embedded in the geotiff:
      * acquisitionStartDate - ISO8601 date
      * acquisitionEndDate - ISO8601 date

    The following metadata entries are optional:
      * sourceId - uuid referencing the asset in the partner's system
      * fieldId - uuid referencing a field in the Climate system
      * boundaryId - uuid referencing a boundary in the Climate system
      * brandId - uuid referencing a partner's branding in the Climate system
      * name - name of the layer. The maximum number of characters that will be accepted as input is 20.

    Requires either imagery:write or platform scope.
  </details>
  <details><summary> __image/vnd.climate.rgb.geotiff__</summary>

    Allows for the upload of a true color image. The image is a multi band geotiff with 24-bit composite values. Each band is 8 bits with values in the range of 0 to 255. The Coordinate Reference System (CRS) must be UTM with WGS84 datum. The geotiff must contain 3 bands in the order Red, Green, Blue.

    The following metadata entries are required to be embedded in the geotiff:
      * acquisitionStartDate - ISO8601 date
      * acquisitionEndDate - ISO8601 date
      * isCalibrated - boolean

    The following metadata entries are optional:
      * sourceId - uuid referencing the asset in the partner's system
      * fieldId - uuid referencing a field in the Climate system
      * boundaryId - uuid referencing a boundary in the Climate system
      * brandId - uuid referencing a partner's branding in the Climate system
      * reflectanceComputeMethod - either TOA or GROUND
      * name - name of the layer. The maximum number of characters that will be accepted as input is 20.

    Requires either imagery:write or platform scope.
  </details>
  <details><summary> __image/vnd.climate.rgb-nir.geotiff__</summary>

    Allows for the upload of a Near Infrared (NIR) image. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.

    The following metadata entries are required to be embedded in the geotiff:
      * acquisitionStartDate - ISO8601 date
      * acquisitionEndDate - ISO8601 date
      * isCalibrated - boolean

    The following metadata entries are optional:
      * sourceId - uuid referencing the asset in the partner's system
      * fieldId - uuid referencing a field in the Climate system
      * boundaryId - uuid referencing a boundary in the Climate system
      * brandId - uuid referencing a partner's branding in the Climate system
      * reflectanceComputeMethod - either TOA or GROUND
      * name - name of the layer. The maximum number of characters that will be accepted as input is 20.

    Requires either imagery:write or platform scope.
  </details>
  <details><summary>__image/vnd.climate.rgb-cir.geotiff__</summary>

    Allows for the upload of a Color Infrared (CIR) image. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.

    The following metadata entries are required to be embedded in the geotiff:
      * acquisitionStartDate - ISO8601 date
      * acquisitionEndDate - ISO8601 date
      * isCalibrated - boolean

    The following metadata entries are optional:
      * sourceId - uuid referencing the asset in the partner's system
      * fieldId - uuid referencing a field in the Climate system
      * boundaryId - uuid referencing a boundary in the Climate system
      * brandId - uuid referencing a partner's branding in the Climate system
      * reflectanceComputeMethod - either TOA or GROUND
      * name - name of the layer. The maximum number of characters that will be accepted as input is 20.

    Requires either imagery:write or platform scope.
  </details>
  <details><summary> __application/vnd.climate.rx.planting.shp__</summary>

    Allows for the upload of a planting prescription in shapefile format.  The upload must be an archive in the zip format.  It should contain one and only one of each of the following file types:
      * .shp
      * .shx
      * .dbf

    All files with the above suffixes must have the same prefix, ie Back40.shp, Back40.shx and Back40.dbf.

    Requires either rx:write or platform scope.
  </details>
  <details><summary> __application/vnd.climate.prescription.zones.shp__</summary>

    Allows for the upload of a zones prescription in shapefile format.  The upload must be an archive in the zip format.  It should contain one and only one of each of the following file types:
      * .shp
      * .shx
      * .dbf

    All files with the above suffixes must have the same prefix, ie Back40.shp, Back40.shx and Back40.dbf.

    The following metadata entries are required:
      * fieldId - field identifier for prescription zones.
    
    Requires either rxZones:write or platform scope.
  </details>
  <details><summary> __application/vnd.climate.modus.xml__</summary>

    Allows for the upload of a soil sampling file in the modus 1.0 format with some restrictions.  The upload must be a single xml file.

    The following elements are required to be present in the modus file.
      * EventCode - Max length of 64 bytes
      * EventDate - Must be in ISO8601
      * SoilSample - Has a maxOccurs of 20k
      * Depth - Has a maxOccurs of 50
      * LabName - Must be non-empty.
      * StartingDepth - 0 to 36 inclusive, default 0
      * EndingDepth - 1 - 36 inclusive, default 1
      * ColumnDepth
      * DepthUnit - must be inches
      * Geometry - point in wgs84
    
    Requires the soil:write scope.
   </details>
   <details><summary> __application/vnd.climate.stand-count.geojson__</summary>

    Allows for the upload of a valid [geojson feature collection](https://tools.ietf.org/html/rfc7946#section-3.3).

    Each feature in the collection must contain the following entry in its properties section:
      * StandPPA - A count of the number of plants per acre:

    Additionally, the type field of each feature's geometry field must be:
      * Point

    Requires `imagery:write` scope.
   </details>
   <details><summary> __application/vnd.climate.weed-count.geojson__</summary>

    Allows for the upload of a valid [geojson feature collection](https://tools.ietf.org/html/rfc7946#section-3.3).

    Each feature in the collection must contain the following entry in its properties section:
      * StandPPA - A count of the number of plants per acre:

    Additionally, the type field of each feature's geometry field must be:
      * Point

    Requires `imagery:write` scope.
   </details>
   <details><summary> __application/vnd.climate.as-applied.zip__</summary>

    Allows for the upload of a valid application data [supported formats](https://support.climate.com/kt#/kA02A000000DjvOSAS/en_US).

    The following metadata entries are required:
      * fileName - name of the file being uploaded.

    The following metadata entries are optional:
      * resourceOwner - the grower's account email, where dealer/partner wants to upload data. As a prerequisite the grower must share their operation with the dealer/partner.

    Requires `asApplied:write` scope.
   </details>
   <details><summary> __application/vnd.climate.as-planted.zip__</summary>

    Allows for the upload of a valid planting data [supported formats](https://support.climate.com/kt#/kA02A000000DjvOSAS/en_US).

    The following metadata entries are required:
      * fileName - name of the file being uploaded.

    The following metadata entries are optional:
      * resourceOwner - the grower's account email, where dealer/partner wants to upload data. As a prerequisite the grower must share their operation with the dealer/partner.

    Requires `asPlanted:write` scope.
   </details>
   <details><summary> __application/vnd.climate.as-harvested.zip__</summary>

    Allows for the upload of a valid harvest data [supported formats](https://support.climate.com/kt#/kA02A000000DjvOSAS/en_US).

    The following metadata entries are required:
      * fileName - name of the file being uploaded.

    The following metadata entries are optional:
      * resourceOwner - the grower's account email, where dealer/partner wants to upload data. As a prerequisite the grower must share their operation with the dealer/partner.

    Requires `asHarvested:write` scope.
   </details> """,
    tags=['upload_process_management'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_upload(
    x__recipient__email: Optional[str] = Header(None, alias='X-Recipient-Email'),
    body: Upload = None,
):
    """
    Initiate a new upload
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v4/uploads/status/query',
    description=""" Check the status of multiple **Uploads** (up to 100 per request). """,
    tags=['upload_process_management'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def fetch_upload_statuses(body: UploadStatusQuery = None):
    """
    Retrieve Upload statuses in batch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v4/uploads/{uploadId}',
    description=""" Send chunked data for an **Upload**. """,
    tags=['upload_process_management'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def chunked_upload(
    content__range: str = Header(..., alias='Content-Range'),
    upload_id: UUID = Path(..., alias='uploadId'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    Chunked upload of data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/uploads/{uploadId}/status',
    description=""" Check the status of an **Upload** by ID. """,
    tags=['upload_process_management', 'export_request_handling'],
    security=[
        APIKeyHeader(name="X-Api-Key"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def fetch_upload_status_by_id(upload_id: UUID = Path(..., alias='uploadId')):
    """
    Retrieve Upload status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
