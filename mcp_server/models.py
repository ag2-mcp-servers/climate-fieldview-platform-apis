# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:10:36+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field, RootModel


class ApplicationActivitySummary(BaseModel):
    createdAt: datetime = Field(
        ...,
        description='The time the application activity was created. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).',
    )
    endTime: datetime = Field(
        ...,
        description='The start time of the application activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).',
    )
    fieldIds: List[str] = Field(
        ..., description='Array of field ids associated the application activity.'
    )
    id: UUID = Field(..., description='The id of an application activity.')
    length: int = Field(
        ..., description='The size in bytes of the raw application activity file.'
    )
    startTime: datetime = Field(
        ...,
        description='The start time of the application activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).',
    )
    updatedAt: datetime = Field(
        ...,
        description='The time the application activity was last updated. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).',
    )


class Area(BaseModel):
    q: float
    u: str


class Binary(RootModel[bytes]):
    root: bytes


class BinaryData(RootModel[bytes]):
    root: bytes = Field(..., description='Binary contents')


class Type(Enum):
    FeatureCollection = 'FeatureCollection'


class BoundariesQuery(BaseModel):
    ids: List[UUID]


class Type1(Enum):
    Feature = 'Feature'


class CreatedExport(BaseModel):
    id: UUID = Field(..., description='Unique identifier for the export.')


class CreatedUpload(RootModel[UUID]):
    root: UUID = Field(..., description='Successfully created upload request')


class Empty(BaseModel):
    pass


class Error1(BaseModel):
    code: str
    id: UUID
    message: str = Field(..., description='Description of the error encountered.')


class Error(BaseModel):
    error: Optional[Error1] = None


class ContentType(Enum):
    application_vnd_climate_acrsi_geojson = 'application/vnd.climate.acrsi.geojson'
    application_vnd_climate_harvest_geojson = 'application/vnd.climate.harvest.geojson'


class Export(BaseModel):
    contentType: ContentType = Field(
        ...,
        description='Content type representing data being exported (e.g. application/vnd.climate.acrsi.geojson).',
    )
    definition: Optional[Dict[str, Any]] = Field(
        None,
        description="Additional specifications for a client's data export request, dependent on the content type.",
    )


class ExportContents(BaseModel):
    body: BinaryData


class Status(Enum):
    PROCESSING = 'PROCESSING'
    INVALID = 'INVALID'
    EXPIRED = 'EXPIRED'
    COMPLETED = 'COMPLETED'
    NO_DATA = 'NO_DATA'


class ExportStatus(BaseModel):
    checksum: Optional[str] = Field(
        None, description="Base64 encoded MD5 hash of the export's contents."
    )
    error: Optional[str] = Field(
        None, description='Message indicating reason for validation failure.'
    )
    size: Optional[int] = Field(
        None, description="Size of the export's contents in bytes."
    )
    status: Status = Field(
        ...,
        description='Current status of the export request:\n  * `PROCESSING` - Export request has been received by Climate and is being processed.\n  * `INVALID` - Export request has failed validity check.\n  * `EXPIRED` - Export contents have expired, and are no longer available for retrieval.\n  * `COMPLETED` - The export request has been successfully processed, and its contents are available for retrieval.\n  * `NO_DATA` - The export request completed successfully but generated no data.\n',
    )
    xNextToken: Optional[str] = Field(
        None,
        description="Token which may be used when executing an identical export in\nthe future, but which only wants export data which was not\npreviously exported.\nAssume a given field export request matches 12 fields today. And\ntomorrow it matches 15 fields. By passing the xNextToken in the\ndefinition section of tomorrow's field export request, only the\n3 additional fields would be exported. Note, all other parameters\npassed in the definition section must be identical to the original\nrequest.\n",
    )


class Type2(Enum):
    farm = 'farm'


class FarmOrganization(BaseModel):
    id: UUID = Field(..., description='Unique identifier for a farm organization.')
    name: str = Field(..., description='Name of the farm organization.')
    type: Type2 = Field(..., description='Type of the farm organization.')


class Type3(Enum):
    Point = 'Point'
    Polygon = 'Polygon'
    MultiPolygon = 'MultiPolygon'


class Geometry(BaseModel):
    coordinates: List[str]
    type: Type3


class HarvestActivityContents(BaseModel):
    body: BinaryData


class HarvestActivitySummary(BaseModel):
    createdAt: datetime = Field(
        ...,
        description='The time the harvest activity was created. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).',
    )
    endTime: datetime = Field(
        ...,
        description='The start time of the harvest activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).',
    )
    fieldIds: List[str] = Field(
        ..., description='Array of field ids associated the harvest activity.'
    )
    id: UUID = Field(..., description='The id of a harvest activity.')
    length: int = Field(
        ..., description='The size in bytes of the raw harvest activity file.'
    )
    startTime: datetime = Field(
        ...,
        description='The start time of the harvest activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).',
    )
    updatedAt: datetime = Field(
        ...,
        description='The time the harvest activity was last updated. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).',
    )


class Metadata(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class Operation(BaseModel):
    id: UUID = Field(..., description='Unique identifier for the operation.')
    name: str = Field(..., description='Name of the operation.')
    resourceOwnerId: UUID = Field(
        ...,
        description='Unique identifier of the resource owner that owns the Operation.',
    )


class Operations(BaseModel):
    results: List[Operation]


class Type4(Enum):
    farm = 'farm'


class Parent(BaseModel):
    id: UUID = Field(
        ..., description='Unique identifier for the parent of a farm organization.'
    )
    type: Type4 = Field(..., description='Type of the parent of a farm organization.')


class PlantingActivityContents(BaseModel):
    body: BinaryData


class PlantingActivitySummary(BaseModel):
    createdAt: datetime = Field(
        ...,
        description='The time the planting activity was created. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).',
    )
    endTime: datetime = Field(
        ...,
        description='The start time of the planting activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).',
    )
    fieldIds: List[str] = Field(
        ..., description='Array of field ids associated the planting activity.'
    )
    id: UUID = Field(..., description='The id of a planting activity.')
    length: int = Field(
        ..., description='The size in bytes of the raw planting activity file.'
    )
    startTime: datetime = Field(
        ...,
        description='The start time of the planting activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).',
    )
    updatedAt: datetime = Field(
        ...,
        description='The time the planting activity was last updated. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).',
    )


class Point(BaseModel):
    coordinates: List[float]
    type: str


class ResourceOwner(BaseModel):
    email: str
    id: UUID
    name: str


class LocationDisplayColor(Enum):
    field_307af7 = '#307af7'
    field_38d753 = '#38d753'
    b037e4 = '#b037e4'
    ef3e3e = '#ef3e3e'
    f7ec41 = '#f7ec41'
    ff8439 = '#ff8439'
    field_808080 = '#808080'


class Status1(Enum):
    ACTIVE = 'ACTIVE'
    DELETED = 'DELETED'


class Timespan(Enum):
    PERMANENT = 'PERMANENT'
    SEASONAL = 'SEASONAL'


class ScoutingObservationAttachment(BaseModel):
    contentType: str = Field(
        ..., description='The content type of the attachment, e.g. image/png.'
    )
    id: UUID = Field(..., description='id of the attachment')
    length: int = Field(..., description='The number of bytes in the attachment.')
    status: Status1 = Field(
        ..., description='The status of the attachment. For example : ACTIVE, DELETED'
    )
    updatedAt: datetime = Field(
        ...,
        description='The time the attachment was last updated.\nTime in ISO 8601 format with UTC timezone, 3 fractional seconds.\n(https://tools.ietf.org/html/rfc3339)\n',
    )


class ScoutingObservationAttachmentContents(BaseModel):
    body: BinaryData


class ScoutingObservationAttachments(BaseModel):
    results: List[ScoutingObservationAttachment]


class ScoutingObservationSummary(BaseModel):
    endTime: datetime = Field(
        ...,
        description='The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).',
    )
    id: UUID = Field(..., description='The id of a scouting observation.')
    startTime: datetime = Field(
        ...,
        description='The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).',
    )
    updatedAt: datetime = Field(
        ...,
        description='The time the scouting observation or any of its attachments was last updated.Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).',
    )


class ScoutingObservations(BaseModel):
    results: List[ScoutingObservationSummary]


class ScoutingTag(BaseModel):
    code: str


class ContentType1(Enum):
    image_vnd_climate_thermal_geotiff = 'image/vnd.climate.thermal.geotiff'
    image_vnd_climate_ndvi_geotiff = 'image/vnd.climate.ndvi.geotiff'
    image_vnd_climate_rgb_geotiff = 'image/vnd.climate.rgb.geotiff'
    image_vnd_climate_rgb_nir_geotiff = 'image/vnd.climate.rgb-nir.geotiff'
    image_vnd_climate_rgb_cir_geotiff = 'image/vnd.climate.rgb-cir.geotiff'
    image_vnd_climate_waterstress_geotiff = 'image/vnd.climate.waterstress.geotiff'
    image_vnd_climate_elevation_geotiff = 'image/vnd.climate.elevation.geotiff'
    image_vnd_climate_raw_geotiff = 'image/vnd.climate.raw.geotiff'
    application_vnd_climate_field_geojson = 'application/vnd.climate.field.geojson'
    application_vnd_climate_rx_planting_shp = 'application/vnd.climate.rx.planting.shp'
    application_vnd_climate_prescription_zones_shp = (
        'application/vnd.climate.prescription.zones.shp'
    )
    application_vnd_climate_modus_xml = 'application/vnd.climate.modus.xml'
    application_vnd_climate_stand_count_geojson = (
        'application/vnd.climate.stand-count.geojson'
    )
    application_vnd_climate_weed_count_geojson = (
        'application/vnd.climate.weed-count.geojson'
    )
    application_vnd_climate_as_applied_zip = 'application/vnd.climate.as-applied.zip'
    application_vnd_climate_as_planted_zip = 'application/vnd.climate.as-planted.zip'
    application_vnd_climate_as_harvested_zip = (
        'application/vnd.climate.as-harvested.zip'
    )


class Upload(BaseModel):
    contentType: ContentType1 = Field(
        ...,
        description='Content type representing data being uploaded (e.g. image/vnd.climate.rgb.geotiff)',
    )
    length: int = Field(..., description='Content size in bytes')
    md5: str = Field(..., description='Base64 encoded md5 hash of the content')
    metadata: Optional[Metadata] = None


class Status3(Enum):
    UPLOADING = 'UPLOADING'
    INVALID = 'INVALID'
    PENDING = 'PENDING'
    INBOX = 'INBOX'
    DECLINED = 'DECLINED'
    IMPORTING = 'IMPORTING'
    SUCCESS = 'SUCCESS'


class UploadStatus(BaseModel):
    id: UUID = Field(..., description='Unique identifier for the upload.')
    status: Status3 = Field(
        ...,
        description='Current status of the upload:\n  * `UPLOADING` - Uploading has started, parts are still coming in.\n  * `INVALID` - Upload has failed validity check.\n  * `PENDING` - Upload has been received by Climate and is being processed.\n  * `INBOX` - The upload is awaiting user acceptance in their Data Inbox.\n  * `DECLINED` - The user has declined the upload in their Data Inbox.\n  * `IMPORTING` - The user has accepted the upload and it is being imported into their account.\n  * `SUCCESS` - The upload has been successfully imported.\n',
    )


class UploadStatusQuery(BaseModel):
    ids: List[UUID]


class UploadStatuses(BaseModel):
    results: List[UploadStatus]


class UploadedBoundaryId(BaseModel):
    id: UUID


class FarmOrganizationType(Enum):
    farm = 'farm'


class ApplicationActivities(BaseModel):
    results: List[ApplicationActivitySummary]


class ApplicationActivityContents(BaseModel):
    body: BinaryData


class BoundaryProperties(BaseModel):
    area: Area
    centroid: Point


class BoundaryUpload(BaseModel):
    geometry: Geometry


class FieldModel(BaseModel):
    boundaryId: UUID = Field(
        ..., description="Unique identifier for the current Field's Boundary."
    )
    id: UUID = Field(..., description='Unique identifier for a Field.')
    name: str = Field(..., description='Name of the Field.')
    parent: Parent
    resourceOwnerId: UUID = Field(
        ..., description='Unique identifier of the resource owner that owns the Field.'
    )


class Fields(BaseModel):
    results: List[FieldModel]


class HarvestActivities(BaseModel):
    results: List[HarvestActivitySummary]


class PlantingActivities(BaseModel):
    results: List[PlantingActivitySummary]


class ScoutingObservation(BaseModel):
    endTime: datetime = Field(
        ...,
        description='The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).',
    )
    fieldIds: List[str] = Field(
        ..., description='Array of field ids associated with this observation.'
    )
    id: UUID = Field(..., description='The id of a scouting observation.')
    location: Geometry = Field(
        ..., description='Where the scouting observation occurred.  GeoJson in WGS84.'
    )
    locationDisplayColor: LocationDisplayColor = Field(
        ...,
        description='Color of scouting pin assigned in the Climate FieldView app.\nLimited in the Ux to a set of RGB values.\n* #307af7\n* #38d753\n* #b037e4\n* #ef3e3e\n* #f7ec41\n* #ff8439\n* #808080\n',
    )
    note: str = Field(
        ...,
        description='The text of the scouting observation. Maximum of 4000 characters.',
    )
    startTime: datetime = Field(
        ...,
        description='The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).',
    )
    status: Status1 = Field(
        ...,
        description='The status of the scouting observation For example : ACTIVE, DELETED',
    )
    tags: List[ScoutingTag] = Field(
        ...,
        description='For example, ROCK_STONE, PONDING_WET, HAIL Maximum 20 tags allowed, 40 characters per tag.',
    )
    timespan: Timespan = Field(..., description='Permanent or seasonal')
    title: str = Field(
        ...,
        description='The title or summary of the scouting observation. 40 Characters long, no emojis, and leading and trailing whitespace will be trimmed.',
    )
    updatedAt: datetime = Field(
        ...,
        description='The time the scouting observation or any of its attachments was last updated.Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).',
    )


class Boundary(BaseModel):
    geometry: Geometry
    id: UUID
    properties: BoundaryProperties
    type: Type1


class Boundaries(BaseModel):
    features: List[Boundary]
    type: Type
